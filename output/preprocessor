================================================================================
DrumTool::Models::Bubbles::Standard::Preprocessors::Preprocessor performing step: DrumTool::Preprocessors::Stages::Splitify
================================================================================
================================================================================
DrumTool::Models::Bubbles::Standard::Preprocessors::Preprocessor's text after performing step: DrumTool::Preprocessors::Stages::Splitify
================================================================================
0000 lp  0x20
0001 bpm 112
0002 ref 16
0003 > scale 1
0004   > i rs 38
0005     on 0 1 3 6 11 16 22 29 37 45 55 66
0006     lp 0x20
0007 > scale 1
0008   > i bd 36
0009     when %x5
0010     lp 0x08
0011   #> i ch 41
0012     on %1
0013     not 2
0014     lp x4
0015     mu 
0016   > i oh 39
0017     sh 2
0018     when %4
0019 > i sd 37  
0020   rot 4
0021   scale -1
0022   when %8 
0023 > scale 3
0024   > i bs 40
0025     lp x10
0026     sh 2
0027     on %5
0028 > lp x20
0029   > scale 1
0030     i sy 49       
0031     sh 2
0032     when %5
0033     lp 8
0034 #   on { 0 != t%6 && 0 == t%2 }
0035 > i s2 47
0036   lp x20
0037   on %9
0038 > i t2 46
0039   scale 0 
0040   on %6
0041   lp 0x10
0042   sh 2
================================================================================
DrumTool::Models::Bubbles::Standard::Preprocessors::Preprocessor performing step: DrumTool::Preprocessors::Stages::Untabify
================================================================================
================================================================================
DrumTool::Models::Bubbles::Standard::Preprocessors::Preprocessor's text after performing step: DrumTool::Preprocessors::Stages::Untabify
================================================================================
0000 lp  0x20
0001 bpm 112
0002 ref 16
0003 > scale 1
0004   > i rs 38
0005     on 0 1 3 6 11 16 22 29 37 45 55 66
0006     lp 0x20
0007 > scale 1
0008   > i bd 36
0009     when %x5
0010     lp 0x08
0011   #> i ch 41
0012     on %1
0013     not 2
0014     lp x4
0015     mu 
0016   > i oh 39
0017     sh 2
0018     when %4
0019 > i sd 37  
0020   rot 4
0021   scale -1
0022   when %8 
0023 > scale 3
0024   > i bs 40
0025     lp x10
0026     sh 2
0027     on %5
0028 > lp x20
0029   > scale 1
0030     i sy 49       
0031     sh 2
0032     when %5
0033     lp 8
0034 #   on { 0 != t%6 && 0 == t%2 }
0035 > i s2 47
0036   lp x20
0037   on %9
0038 > i t2 46
0039   scale 0 
0040   on %6
0041   lp 0x10
0042   sh 2
================================================================================
DrumTool::Models::Bubbles::Standard::Preprocessors::Preprocessor performing step: DrumTool::Preprocessors::Stages::NormalizeFullLineComments
================================================================================
================================================================================
DrumTool::Models::Bubbles::Standard::Preprocessors::Preprocessor's text after performing step: DrumTool::Preprocessors::Stages::NormalizeFullLineComments
================================================================================
0000 lp  0x20
0001 bpm 112
0002 ref 16
0003 > scale 1
0004   > i rs 38
0005     on 0 1 3 6 11 16 22 29 37 45 55 66
0006     lp 0x20
0007 > scale 1
0008   > i bd 36
0009     when %x5
0010     lp 0x08
0011 #  > i ch 41
0012     on %1
0013     not 2
0014     lp x4
0015     mu 
0016   > i oh 39
0017     sh 2
0018     when %4
0019 > i sd 37  
0020   rot 4
0021   scale -1
0022   when %8 
0023 > scale 3
0024   > i bs 40
0025     lp x10
0026     sh 2
0027     on %5
0028 > lp x20
0029   > scale 1
0030     i sy 49       
0031     sh 2
0032     when %5
0033     lp 8
0034 #   on { 0 != t%6 && 0 == t%2 }
0035 > i s2 47
0036   lp x20
0037   on %9
0038 > i t2 46
0039   scale 0 
0040   on %6
0041   lp 0x10
0042   sh 2
================================================================================
DrumTool::Models::Bubbles::Standard::Preprocessors::Preprocessor performing step: #<DrumTool::Preprocessors::Stages::StripBlankLinesAndTrailingWhitespaceAndComments:0x007f836b048080>
================================================================================
================================================================================
DrumTool::Models::Bubbles::Standard::Preprocessors::Preprocessor's text after performing step: #<DrumTool::Preprocessors::Stages::StripBlankLinesAndTrailingWhitespaceAndComments:0x007f836b048080>
================================================================================
0000 lp  0x20
0001 bpm 112
0002 ref 16
0003 > scale 1
0004   > i rs 38
0005     on 0 1 3 6 11 16 22 29 37 45 55 66
0006     lp 0x20
0007 > scale 1
0008   > i bd 36
0009     when %x5
0010     lp 0x08
0011 #  > i ch 41
0012     on %1
0013     not 2
0014     lp x4
0015     mu
0016   > i oh 39
0017     sh 2
0018     when %4
0019 > i sd 37
0020   rot 4
0021   scale -1
0022   when %8
0023 > scale 3
0024   > i bs 40
0025     lp x10
0026     sh 2
0027     on %5
0028 > lp x20
0029   > scale 1
0030     i sy 49
0031     sh 2
0032     when %5
0033     lp 8
0034 > i s2 47
0035   lp x20
0036   on %9
0037 > i t2 46
0038   scale 0
0039   on %6
0040   lp 0x10
0041   sh 2
================================================================================
DrumTool::Models::Bubbles::Standard::Preprocessors::Preprocessor performing step: DrumTool::Preprocessors::Stages::RubifyArgumentsAndExpandAbbreviations
================================================================================
0000 lp  0x20
  Parsed simple expr: "lp  0x20" 1:"lp" 2:"0x20"
  Arg `0x20' is a IntOrHex: `0x20'
  Tokens: ["", "loop", ["0x20"], ""]
  Reassembled: `loop(0x20)'
0001 bpm 112
  Parsed simple expr: "bpm 112" 1:"bpm" 2:"112"
  Arg `112' is a IntOrHex: `112'
  Tokens: ["", "bpm", ["112"], ""]
  Reassembled: `bpm(112)'
0002 ref 16
  Parsed simple expr: "ref 16" 1:"ref" 2:"16"
  Arg `16' is a IntOrHex: `16'
  Tokens: ["", "refresh_interval", ["16"], ""]
  Reassembled: `refresh_interval(16)'
0003 > scale 1
  Parsed simple expr: "scale 1" 1:"scale" 2:"1"
  Arg `1' is a IntOrHex: `1'
  Tokens: ["> ", "scale", ["1"], ""]
  Reassembled: `> scale(1)'
0004   > i rs 38
  Parsed simple expr: "i rs 38" 1:"i" 2:"rs 38"
  Arg `rs' is a Name: `:rs'
  Arg `38' is a IntOrHex: `38'
  Tokens: ["  > ", "note", [":rs", "38"], ""]
  Reassembled: `  > note(:rs, 38)'
0005     on 0 1 3 6 11 16 22 29 37 45 55 66
  Parsed simple expr: "on 0 1 3 6 11 16 22 29 37 45 55 66" 1:"on" 2:"0 1 3 6 11 16 22 29 37 45 55 66"
  Arg `0' is a IntOrHex: `0'
  Arg `1' is a IntOrHex: `1'
  Arg `3' is a IntOrHex: `3'
  Arg `6' is a IntOrHex: `6'
  Arg `11' is a IntOrHex: `11'
  Arg `16' is a IntOrHex: `16'
  Arg `22' is a IntOrHex: `22'
  Arg `29' is a IntOrHex: `29'
  Arg `37' is a IntOrHex: `37'
  Arg `45' is a IntOrHex: `45'
  Arg `55' is a IntOrHex: `55'
  Arg `66' is a IntOrHex: `66'
  Tokens: ["    ", "trigger", ["0", "1", "3", "6", "11", "16", "22", "29", "37", "45", "55", "66"], ""]
  Reassembled: `    trigger(0, 1, 3, 6, 11, 16, 22, 29, 37, 45, 55, 66)'
0006     lp 0x20
  Parsed simple expr: "lp 0x20" 1:"lp" 2:"0x20"
  Arg `0x20' is a IntOrHex: `0x20'
  Tokens: ["    ", "loop", ["0x20"], ""]
  Reassembled: `    loop(0x20)'
0007 > scale 1
  Parsed simple expr: "scale 1" 1:"scale" 2:"1"
  Arg `1' is a IntOrHex: `1'
  Tokens: ["> ", "scale", ["1"], ""]
  Reassembled: `> scale(1)'
0008   > i bd 36
  Parsed simple expr: "i bd 36" 1:"i" 2:"bd 36"
  Arg `bd' is a Name: `:bd'
  Arg `36' is a IntOrHex: `36'
  Tokens: ["  > ", "note", [":bd", "36"], ""]
  Reassembled: `  > note(:bd, 36)'
0009     when %x5
  Parsed simple expr: "when %x5" 1:"when" 2:"%x5"
  Arg `%0x5' is a Modulo: `(Proc.new { |t| t%0x5 })'
  Tokens: ["    ", "trigger", ["(Proc.new { |t| t%0x5 })"], ""]
  Reassembled: `    trigger((Proc.new { |t| t%0x5 }))'
0010     lp 0x08
  Parsed simple expr: "lp 0x08" 1:"lp" 2:"0x08"
  Arg `0x08' is a IntOrHex: `0x08'
  Tokens: ["    ", "loop", ["0x08"], ""]
  Reassembled: `    loop(0x08)'
0011 #  > i ch 41
  Parse complex expr: `#  > i ch 41'
  Tokens: ["", "#  > i ch 41", [], ""]
  Reassembled: `#  > i ch 41'
0012     on %1
  Parsed simple expr: "on %1" 1:"on" 2:"%1"
  Arg `%1' is a Modulo: `(Proc.new { |t| t%1 })'
  Tokens: ["    ", "trigger", ["(Proc.new { |t| t%1 })"], ""]
  Reassembled: `    trigger((Proc.new { |t| t%1 }))'
0013     not 2
  Parsed simple expr: "not 2" 1:"not" 2:"2"
  Arg `2' is a IntOrHex: `2'
  Tokens: ["    ", "not", ["2"], ""]
  Reassembled: `    not(2)'
0014     lp x4
  Parsed simple expr: "lp x4" 1:"lp" 2:"x4"
  Arg `x4' is a IntOrHex: `0x4'
  Tokens: ["    ", "loop", ["0x4"], ""]
  Reassembled: `    loop(0x4)'
0015     mu
  Parsed simple expr: "mu" 1:"mu" 2:nil
  Tokens: ["    ", "mute!", [], ""]
  Reassembled: `    mute!'
0016   > i oh 39
  Parsed simple expr: "i oh 39" 1:"i" 2:"oh 39"
  Arg `oh' is a Name: `:oh'
  Arg `39' is a IntOrHex: `39'
  Tokens: ["  > ", "note", [":oh", "39"], ""]
  Reassembled: `  > note(:oh, 39)'
0017     sh 2
  Parsed simple expr: "sh 2" 1:"sh" 2:"2"
  Arg `2' is a IntOrHex: `2'
  Tokens: ["    ", "shift", ["2"], ""]
  Reassembled: `    shift(2)'
0018     when %4
  Parsed simple expr: "when %4" 1:"when" 2:"%4"
  Arg `%4' is a Modulo: `(Proc.new { |t| t%4 })'
  Tokens: ["    ", "trigger", ["(Proc.new { |t| t%4 })"], ""]
  Reassembled: `    trigger((Proc.new { |t| t%4 }))'
0019 > i sd 37
  Parsed simple expr: "i sd 37" 1:"i" 2:"sd 37"
  Arg `sd' is a Name: `:sd'
  Arg `37' is a IntOrHex: `37'
  Tokens: ["> ", "note", [":sd", "37"], ""]
  Reassembled: `> note(:sd, 37)'
0020   rot 4
  Parsed simple expr: "rot 4" 1:"rot" 2:"4"
  Arg `4' is a IntOrHex: `4'
  Tokens: ["  ", "rotate", ["4"], ""]
  Reassembled: `  rotate(4)'
0021   scale -1
  Parse complex expr: `scale -1'
  Tokens: ["  ", "scale -1", [], ""]
  Reassembled: `  scale -1'
0022   when %8
  Parsed simple expr: "when %8" 1:"when" 2:"%8"
  Arg `%8' is a Modulo: `(Proc.new { |t| t%8 })'
  Tokens: ["  ", "trigger", ["(Proc.new { |t| t%8 })"], ""]
  Reassembled: `  trigger((Proc.new { |t| t%8 }))'
0023 > scale 3
  Parsed simple expr: "scale 3" 1:"scale" 2:"3"
  Arg `3' is a IntOrHex: `3'
  Tokens: ["> ", "scale", ["3"], ""]
  Reassembled: `> scale(3)'
0024   > i bs 40
  Parsed simple expr: "i bs 40" 1:"i" 2:"bs 40"
  Arg `bs' is a Name: `:bs'
  Arg `40' is a IntOrHex: `40'
  Tokens: ["  > ", "note", [":bs", "40"], ""]
  Reassembled: `  > note(:bs, 40)'
0025     lp x10
  Parsed simple expr: "lp x10" 1:"lp" 2:"x10"
  Arg `x10' is a IntOrHex: `0x10'
  Tokens: ["    ", "loop", ["0x10"], ""]
  Reassembled: `    loop(0x10)'
0026     sh 2
  Parsed simple expr: "sh 2" 1:"sh" 2:"2"
  Arg `2' is a IntOrHex: `2'
  Tokens: ["    ", "shift", ["2"], ""]
  Reassembled: `    shift(2)'
0027     on %5
  Parsed simple expr: "on %5" 1:"on" 2:"%5"
  Arg `%5' is a Modulo: `(Proc.new { |t| t%5 })'
  Tokens: ["    ", "trigger", ["(Proc.new { |t| t%5 })"], ""]
  Reassembled: `    trigger((Proc.new { |t| t%5 }))'
0028 > lp x20
  Parsed simple expr: "lp x20" 1:"lp" 2:"x20"
  Arg `x20' is a IntOrHex: `0x20'
  Tokens: ["> ", "loop", ["0x20"], ""]
  Reassembled: `> loop(0x20)'
0029   > scale 1
  Parsed simple expr: "scale 1" 1:"scale" 2:"1"
  Arg `1' is a IntOrHex: `1'
  Tokens: ["  > ", "scale", ["1"], ""]
  Reassembled: `  > scale(1)'
0030     i sy 49
  Parsed simple expr: "i sy 49" 1:"i" 2:"sy 49"
  Arg `sy' is a Name: `:sy'
  Arg `49' is a IntOrHex: `49'
  Tokens: ["    ", "note", [":sy", "49"], ""]
  Reassembled: `    note(:sy, 49)'
0031     sh 2
  Parsed simple expr: "sh 2" 1:"sh" 2:"2"
  Arg `2' is a IntOrHex: `2'
  Tokens: ["    ", "shift", ["2"], ""]
  Reassembled: `    shift(2)'
0032     when %5
  Parsed simple expr: "when %5" 1:"when" 2:"%5"
  Arg `%5' is a Modulo: `(Proc.new { |t| t%5 })'
  Tokens: ["    ", "trigger", ["(Proc.new { |t| t%5 })"], ""]
  Reassembled: `    trigger((Proc.new { |t| t%5 }))'
0033     lp 8
  Parsed simple expr: "lp 8" 1:"lp" 2:"8"
  Arg `8' is a IntOrHex: `8'
  Tokens: ["    ", "loop", ["8"], ""]
  Reassembled: `    loop(8)'
0034 > i s2 47
  Parsed simple expr: "i s2 47" 1:"i" 2:"s2 47"
  Arg `s2' is a Name: `:s2'
  Arg `47' is a IntOrHex: `47'
  Tokens: ["> ", "note", [":s2", "47"], ""]
  Reassembled: `> note(:s2, 47)'
0035   lp x20
  Parsed simple expr: "lp x20" 1:"lp" 2:"x20"
  Arg `x20' is a IntOrHex: `0x20'
  Tokens: ["  ", "loop", ["0x20"], ""]
  Reassembled: `  loop(0x20)'
0036   on %9
  Parsed simple expr: "on %9" 1:"on" 2:"%9"
  Arg `%9' is a Modulo: `(Proc.new { |t| t%9 })'
  Tokens: ["  ", "trigger", ["(Proc.new { |t| t%9 })"], ""]
  Reassembled: `  trigger((Proc.new { |t| t%9 }))'
0037 > i t2 46
  Parsed simple expr: "i t2 46" 1:"i" 2:"t2 46"
  Arg `t2' is a Name: `:t2'
  Arg `46' is a IntOrHex: `46'
  Tokens: ["> ", "note", [":t2", "46"], ""]
  Reassembled: `> note(:t2, 46)'
0038   scale 0
  Parsed simple expr: "scale 0" 1:"scale" 2:"0"
  Arg `0' is a IntOrHex: `0'
  Tokens: ["  ", "scale", ["0"], ""]
  Reassembled: `  scale(0)'
0039   on %6
  Parsed simple expr: "on %6" 1:"on" 2:"%6"
  Arg `%6' is a Modulo: `(Proc.new { |t| t%6 })'
  Tokens: ["  ", "trigger", ["(Proc.new { |t| t%6 })"], ""]
  Reassembled: `  trigger((Proc.new { |t| t%6 }))'
0040   lp 0x10
  Parsed simple expr: "lp 0x10" 1:"lp" 2:"0x10"
  Arg `0x10' is a IntOrHex: `0x10'
  Tokens: ["  ", "loop", ["0x10"], ""]
  Reassembled: `  loop(0x10)'
0041   sh 2
  Parsed simple expr: "sh 2" 1:"sh" 2:"2"
  Arg `2' is a IntOrHex: `2'
  Tokens: ["  ", "shift", ["2"], ""]
  Reassembled: `  shift(2)'
================================================================================
DrumTool::Models::Bubbles::Standard::Preprocessors::Preprocessor's text after performing step: DrumTool::Preprocessors::Stages::RubifyArgumentsAndExpandAbbreviations
================================================================================
0000 loop(0x20)
0001 bpm(112)
0002 refresh_interval(16)
0003 > scale(1)
0004   > note(:rs, 38)
0005     trigger(0, 1, 3, 6, 11, 16, 22, 29, 37, 45, 55, 66)
0006     loop(0x20)
0007 > scale(1)
0008   > note(:bd, 36)
0009     trigger((Proc.new { |t| t%0x5 }))
0010     loop(0x08)
0011 #  > i ch 41
0012     trigger((Proc.new { |t| t%1 }))
0013     not(2)
0014     loop(0x4)
0015     mute!
0016   > note(:oh, 39)
0017     shift(2)
0018     trigger((Proc.new { |t| t%4 }))
0019 > note(:sd, 37)
0020   rotate(4)
0021   scale -1
0022   trigger((Proc.new { |t| t%8 }))
0023 > scale(3)
0024   > note(:bs, 40)
0025     loop(0x10)
0026     shift(2)
0027     trigger((Proc.new { |t| t%5 }))
0028 > loop(0x20)
0029   > scale(1)
0030     note(:sy, 49)
0031     shift(2)
0032     trigger((Proc.new { |t| t%5 }))
0033     loop(8)
0034 > note(:s2, 47)
0035   loop(0x20)
0036   trigger((Proc.new { |t| t%9 }))
0037 > note(:t2, 46)
0038   scale(0)
0039   trigger((Proc.new { |t| t%6 }))
0040   loop(0x10)
0041   shift(2)
================================================================================
DrumTool::Models::Bubbles::Standard::Preprocessors::Preprocessor performing step: #<DrumTool::Models::Bubbles::Standard::Preprocessors::Stages::DumberRubifyPythonesqueBlocks:0x007f836b043f08>
================================================================================
0000 00->00 loop(0x20)
0001 00->00 bpm(112)
0002 00->00 refresh_interval(16)
0003 00->00 > scale(1)
0004 00->02   > note(:rs, 38)
0004        Blockify prior line `> scale(1)'.
0005 02->04     trigger(0, 1, 3, 6, 11, 16, 22, 29, 37, 45, 55, 66)
0005        Blockify prior line `  > note(:rs, 38)'.
0006 04->04     loop(0x20)
0007 04->00 > scale(1)
0007        Leave block
0008 00->02   > note(:bd, 36)
0008        Blockify prior line `> scale(1)'.
0009 02->04     trigger((Proc.new { |t| t%0x5 }))
0009        Blockify prior line `  > note(:bd, 36)'.
0010 04->04     loop(0x08)
0011 04->00 #  > i ch 41
0011        Leave block
0012 00->04     trigger((Proc.new { |t| t%1 }))
